#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

import math
import re

def getNumLines(input):
   infile = input.pop()
   if os.path.exists(infile):
      return sum(1 for line in open(infile))
   else:
      return 0

def getFileBP(input):
   if not os.path.exists(input):
      return 0

   s = os.path.getsize(input)
   if re.match(r".*(fq|fastq).*", input):
      s /= 2.50                             #  We don't use quality values so decrease the file size by about half
   if re.match(r".*(xz|gz|bz2)$", input):   #  Zipped files expected to compress
      s *= 4.25                             #  to 25% original size

   return s

#
#  These functions return time and memory estimates for a given rule.
#   - The first two are generic functions used by all rules.
#   - The rest are specific to certain rules.
#
#  Memory requests will be increased by 25% on successive retries.
#
#  Both use ceil instead of int(x + 0.5) so they don't overshoot the
#  actual value ({tag}_mem_gb = 64 returns 64 instead of 65).
#

def getTimeRequest(attempt, tag, factor=1.5):
   scl=max(1.0, (attempt - 1) * factor)
   time=float(config[f"{tag}_time_h"])*scl
   return int(math.ceil(time))

def getMemoryRequest(attempt, tag):
   scl = 0.75 + attempt / 4.0
   mem = float(config[f"{tag}_mem_gb"])
   return int(math.ceil(math.ceil(mem)*scl))

def getOverlapMemoryRequest(attempt, factor=6):
   scl = attempt
   mem = float(config["ovb_mem_gb"])
   batches = int(config["cor_overlap_batches"])
   info="%s/info.txt"%(rules.buildStore.output.seqstore)

   if os.path.exists(info):
      with open(info) as f:
        for l in f:
           if "corrected-compressed" in l:
              bp = float(l.strip().split()[1])
              if (bp > 10000000000): mem = max(mem, 16)
              mem=max(mem, bp*factor/1024/1024/1024/batches)
              break

   return int(math.ceil(math.ceil(mem)*scl))

def getAlignMemoryRequest(attempt, factor, files):
   scl = 0.75 + attempt / 4.0
   mem = float(config['ali_mem_gb'])

   sum = 0
   for filename in files:
      if os.path.exists(filename):
         sum += os.path.getsize(filename)
   if sum > 0:
      mem = factor * sum / 1024 / 1024 / 1024

   return int(math.ceil(math.ceil(mem)*scl))

def getCombineOverlapsMemory(attempt):
   scl = 0.75 + attempt / 4.0
   mem = float(config[f"ovs_mem_gb"])

   if os.path.exists(rules.combineOverlapsConfigure.output.ovlmemory):
      mem = 2.0    #  2 GB of extra memory!
      with open(rules.combineOverlapsConfigure.output.ovlmemory) as f:
         for l in f:
            mem += float(l)

   return int(math.ceil(math.ceil(mem)*scl))

def getMBGMemoryRequest(attempt):              #  Sum the input size, divide by three.
   scl = 0.75 + attempt / 4.0                  #  https://github.com/marbl/verkko/issues/34
   mem = float(config[f"mbg_mem_gb"])          #
   gib = 1024.0 * 1024.0 * 1024.0

   if mem < 2.0:
      mem = 0

      mem += getFileBP(rules.correctHiFi.output.fasta)
      mem = mem * 1.10    #  Expand by 10%
      mem = mem / 2       #  MBG is expected to use 1 byte for each 2 bytes of input
      mem = mem / gib     #  Convert to GB
      mem = mem + 2.0     #  Add 2 GB

   return int(math.ceil(math.ceil(mem)*scl))

def getBuildPackagesInputONT(wildcards, withONT, withBAM):
   result = []

   if withONT == "True":
      if withBAM == "True":
         result=expand("../3-align/split/ont{nnnn}.fasta.gz", nnnn = splitONToutputs(wildcards))
      else:
          result.append("../%s"%(rules.extractONT.output.ont_subset))
   return result

def getBuildPackageMemoryRequest(attempt):     #  Sum the size of input files, 2-bit encoded,
   scl = 0.75 + attempt / 4.0                  #  then add 10% and 2GB.
   mem = float(config[f"par_mem_gb"])          #  But allow par_mem_gb to completely override.
   gib = 1024.0 * 1024.0 * 1024.0

   return int(math.ceil(math.ceil(mem)*scl))

def getConsensusMemoryRequest(attempt, jobid):    #  Figure out what partitioning claims each
   scl = 0.75 + attempt / 4.0                     #  job will need, add 25% and 2GB.
   mem = float(config[f"cns_mem_gb"])             #  But allow cns_mem_gb to completely override.

   if mem < 0.1:
      jobid = jobid.lstrip('0')
      if os.path.exists(rules.buildPackages.output.packreport):
         with open(rules.buildPackages.output.packreport) as f:
            for l in f:
               words = l.strip().split();
               if jobid == words[5]:
                  mem = max(mem, 5.0 + 0.80 * float(words[4]))

   return int(math.ceil(math.ceil(mem)*scl))



#
#  These functions return lists of intermediate files that should exist at
#  various points in the workflow.
#

def getAllMappings(type):
    ret = ''
    if (type > 2):
        ret += ('../2-processGraph/unitig-mapping-1.txt ' +
                '../2-processGraph/haplofix-mapping.txt ' +
                '../2-processGraph/unroll_mapping_1.txt ')
    if (type > 4) and config['withONT'] == "True":
        ret += ('../4-processONT/bridge_mapping.txt ' +
                '../4-processONT/chop-mapping.txt ' +
                '../4-processONT/resolve-mapping.txt ' +
                '../4-processONT/unroll_mapping_2.txt ' +
                '../4-processONT/unitig-mapping-2.txt ')
    if (type > 5):   # and config['withONT'] == "True":
         ret += ('../5-untip/unitig-mapping-3a.txt ' +
                 '../5-untip/unitig-mapping-3b.txt ' +
                 '../5-untip/unitig-mapping-4.txt ')
    return ret


def getAllGraphs(type):
    ret = ''
    if (type > 1):
        ret += ('../1-buildGraph/hifi-resolved.gfa ')
    if (type > 2):
        ret += ('../2-processGraph/gapped-once-hifi-resolved.gfa ' +
                '../2-processGraph/gapped-twice-hifi-resolved.gfa ' +
                '../2-processGraph/gapped-hifi-resolved.gfa ' +
                '../2-processGraph/fixed-hifi-resolved.gfa ' +
                '../2-processGraph/unrolled-hifi-resolved.gfa ' +
                '../2-processGraph/unitig-unrolled-hifi-resolved.gfa ')
    if (type > 4) and config['withONT'] == "True":
        ret += ('../4-processONT/gapped-unitig-unrolled-hifi-resolved.gfa ' +
                '../4-processONT/connected.gfa ' +
                '../4-processONT/normal-connected.gfa ' +
                '../4-processONT/ont-resolved-graph.gfa ' +
                '../4-processONT/unrolled-ont-resolved.gfa ' +
                '../4-processONT/unitig-unrolled-ont-resolved.gfa ')
    if (type > 5):   # and config['withONT'] == "True":
        ret += ('../5-untip/connected-tip.gfa ' +
                '../5-untip/unitig-connected-tip.gfa ' +
                '../5-untip/popped-connected-tip.gfa ' +
                '../5-untip/unrolled-popped-connected-tip.gfa ' +
                '../5-untip/unitig-unrolled-popped-connected-tip.gfa ' +
                '../5-untip/popped-unitig-unrolled-popped-connected-tip.gfa ' +
                '../5-untip/unrolled-popped-unitig-unrolled-popped-connected-tip.gfa ' +
                '../' + rules.verkko.input.graph + ' ')
    return ret


def getAllAlignments(type):
    ret = ''
    if (type > 2):
        ret += ('../2-processGraph/gaps-hifi-1.gaf ' +
                '../2-processGraph/gaps-hifi-2.gaf ' +
                '../2-processGraph/gaps-hifi-3.gaf ')
    if (type > 4) and config['withONT'] == "True":
        ret += ('../4-processONT/gaps-ont.gaf ')
    return ret

