#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule generateConsensus computes consensus sequence for each contig.
#
#  Configuration Parameters:
#    ...
#
#  input.tigmap isn't used directly.  It serves as a sentinel that
#  the buildPackages step finished completely.

rule generateConsensus:
    input:
        package    = '7-consensus/packages/part{nnnn}.cnspack',
        tigmap     = rules.buildPackages.output.tigmap,
        packreport = rules.buildPackages.output.packreport,
        ont_id_file = {rules.extractONT.output.ont_subset_id} if config['withONT'] == "True" else {rules.emptyfile.output}
    output:
        consensus  = '7-consensus/packages/part{nnnn}.fasta'
    log:
        err        = '7-consensus/packages/part{nnnn}.err'
    params:
        ont_ids    = lambda wildcards: getNumLines({rules.extractONT.output.ont_subset_id}) if config['withONT'] == "True" else 0,
        bam        = '7-consensus/packages/part{nnnn}.bam' if config['withBAM'] == "True" else rules.emptyfile.output,
        minread    = config['cor_min_read']
    threads:
        int(config['cns_n_cpus']),
    resources:
        job_id = lambda wildcards, input, attempt: int(wildcards.nnnn),
        n_cpus = int(config['cns_n_cpus']),
        mem_gb = lambda wildcards, input, attempt: getConsensusMemoryRequest(attempt, wildcards.nnnn),
        time_h = lambda wildcards, input, attempt: getTimeRequest(attempt, 'cns', 3)
    shell:
        '''
cd 7-consensus

mkdir -p packages

cat > ./packages/part{wildcards.nnnn}.sh <<EOF
#!/bin/sh
set -e

if [ '{params.bam}' != 'emptyfile' ]; then
   align="-B ../{params.bam}"
else
   align="-norealign"
fi

minread=100
if [ "\$(expr {params.minread} - 500)" -gt 0 ]; then
    minread=500
fi

{VERKKO}/bin/utgcns \\\\
    -threads {threads} \\\\
    -import ../{input.package} \\\\
    -A ../{output.consensus}.WORKING \\\\
    -C 2 \\\\
    \$align \\\\
    -maxcoverage 50 \\\\
    -e  0.05 \\\\
    -em 0.20 \\\\
    -EM {params.ont_ids} \\\\
    -l \$minread \\\\
    -edlib \\\\
&& \\\\
mv ../{output.consensus}.WORKING ../{output.consensus} \\\\
&& \\\\
exit 0

echo ""
echo "Consensus did not finish successfully, exit code \\$?."

echo ""
echo "Files in current directory:"
ls -ltr

echo ""
echo "Files in packages/:"
ls -ltr packages

exit 1
EOF

chmod +x ./packages/part{wildcards.nnnn}.sh

./packages/part{wildcards.nnnn}.sh > ../{log.err} 2>&1
        '''
